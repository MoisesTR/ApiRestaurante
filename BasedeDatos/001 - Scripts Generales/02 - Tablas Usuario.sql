USE  ATOMIC_RESTAURANTE;

GO

--DELETE CONSTRAINT
EXEC USP_DELETE_ALL_F_CONSTRAINT_TABLE 'dbo.USUARIO'
EXEC USP_DELETE_ALL_F_CONSTRAINT_TABLE 'dbo.REFRESH_TOKEN_USER'

GO
IF OBJECT_ID('dbo.ROL_USUARIO') IS NOT NULL
	DROP TABLE dbo.ROL_USUARIO
GO
--Tabla de Roles de Usuario dentro de la Aplicacion
CREATE TABLE	dbo.ROL_USUARIO			(
	IdRol			TINYINT			IDENTITY(1,1), 
	NombRol			NVARCHAR(50)		NOT NULL,
	DescRol			NVARCHAR(150)		NULL,
	Habilitado		BIT					NOT NULL	DEFAULT 1,
	CreatedAt		SMALLDATETIME		NOT NULL	DEFAULT GETDATE(),
	UpdatedAt		SMALLDATETIME		NULL,
	CONSTRAINT PK_ROL_USUARIO	PRIMARY KEY(IdRol),
	CONSTRAINT U_NOMBRE_ROL 	UNIQUE(NombRol)
)
GO
--// Tabla de Informacion del Usuario
--//	Dependencias 
--// *ROL_USUARIO, *TRABAJADOR

IF OBJECT_ID('dbo.USUARIO') IS NOT NULL
	DROP TABLE dbo.USUARIO
GO
CREATE TABLE	dbo.USUARIO	(
	IdUsuario		INT			IDENTITY(1,1),
	IdRol			TINYINT			NOT NULL,
	IdTrabajador	INT				NULL,
	Username		NVARCHAR(50)	NOT NULL,
	Email			NVARCHAR(100)	NULL,
	Imagen			NVARCHAR(100)	NOT NULL,--DEFAULT 'nodisponible.png',
	[Password]		NVARCHAR(100)	NOT NULL,
	Habilitado		BIT				NOT NULL DEFAULT 1,
	CreatedAt		SMALLDATETIME	NOT NULL DEFAULT GETDATE(),
	UpdatedAt		SMALLDATETIME	NULL,
	CONSTRAINT pk_Usuario_Sistema		PRIMARY KEY(IdUsuario),
	CONSTRAINT FK_Rol_del_Usuario		FOREIGN KEY(IdRol) 
				REFERENCES dbo.ROL_USUARIO(IdRol),
	CONSTRAINT FK_USUARIO_TRABAJADOR	FOREIGN KEY(IdTrabajador) 
				REFERENCES TRABAJADOR(IdTrabajador)
);
GO
IF OBJECT_ID('dbo.REFRESH_TOKEN_USER') IS NOT NULL
	DROP TABLE dbo.REFRESH_TOKEN_USER
GO
CREATE TABLE dbo.REFRESH_TOKEN_USER ( 
	RefreshT		VARCHAR(30) NOT NULL,
	IdUsuario		INT NOT NULL,
	UserAgent		VARCHAR(120),
	Habilitado		BIT				NOT NULL DEFAULT 1,
	CreatedAt		SMALLDATETIME	NOT NULL DEFAULT GETDATE(),
	UpdatedAt		SMALLDATETIME	NULL,
	CONSTRAINT	FK_Usuario_Refresh_Token FOREIGN KEY(IdUsuario)
				REFERENCES dbo.USUARIO(IdUsuario),
	CONSTRAINT	PK_RefreshT	PRIMARY KEY (RefreshT)
)
GO
IF OBJECT_ID('dbo.USP_INSERT_REFRESH_TOKEN','P') IS NOT NULL
	DROP PROCEDURE dbo.USP_INSERT_REFRESH_TOKEN;
GO
CREATE PROCEDURE dbo.USP_INSERT_REFRESH_TOKEN (
	@RefreshT		VARCHAR(30),
	@IdUsuario		INT,
	@UserAgent		VARCHAR(120)
) AS BEGIN
	DECLARE @CANTIDAD TINYINT
	SELECT @CANTIDAD = COUNT(*) FROM dbo.REFRESH_TOKEN_USER WHERE IdUsuario = @IdUsuario
	IF( @CANTIDAD >= 3 ) BEGIN
		DELETE FROM dbo.REFRESH_TOKEN_USER
			WHERE RefreshT IN (SELECT TOP 1 RefreshT FROM REFRESH_TOKEN_USER WHERE IdUsuario = @IdUsuario ORDER BY CreatedAt ASC) 
	END
	INSERT INTO dbo.REFRESH_TOKEN_USER(RefreshT, IdUsuario, UserAgent)
	VALUES(@RefreshT, @IdUsuario, @UserAgent)
END
GO
CREATE NONCLUSTERED INDEX IDX_RefreshToken_Info 
ON dbo.REFRESH_TOKEN_USER(RefreshT, IdUsuario, UserAgent)

GO


ALTER TABLE dbo.USUARIO
ADD CONSTRAINT df_Imagen_Usuario DEFAULT 'nodisponible.png' FOR Imagen
GO
--//
----//		Valores Predeterminados			
--//
SET IDENTITY_INSERT dbo.ROL_USUARIO ON
GO
	INSERT INTO dbo.ROL_USUARIO(IdRol, NombRol,DescRol,Habilitado)
	VALUES(1,'Developer', 'Rol para desarrolladores', 1)
	, (2,'Administrador', 'Este Rol Se Utilizara unicamente para los administradores(no trabajadores) de la aplicacion.', 1)
	
GO
SET IDENTITY_INSERT dbo.ROL_USUARIO OFF
GO
USE master;